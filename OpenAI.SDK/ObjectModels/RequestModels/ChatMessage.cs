using System.ComponentModel.DataAnnotations;
using System.Text.Json.Serialization;

namespace OpenAI.ObjectModels.RequestModels;

/// <summary>
///     The contents of the message.
///     Messages must be an array of message objects, where each object has a role (either “system”, “user”, or
///     “assistant”) and content (the content of the message) and an optional name
/// </summary>
public class ChatMessage
{
    /// <summary>
    ///     The role of the author of this message. One of system, user, or assistant.
    /// </summary>
    [JsonPropertyName("role")]
    public string Role { get; set; }

    [JsonIgnore]
    public string? Content { get; set; }

    [JsonIgnore]
    public IList<VisionContent>? VisionContent { get; set; }

    /// <summary>
    ///     The contents of the message.
    /// </summary>
    [JsonPropertyName("content")]
    public object ContentCalculated
    {
        get
        {
            if (Content is not null && VisionContent is not null)
            {
                throw new ValidationException(
                    "Content and VisionContent can not be assigned at the same time. One of them must be null."
                );
            }

            if (Content is not null)
            {
                return Content;
            }

            return VisionContent!;
        }
        set { Content = value?.ToString(); }
    }

    /// <summary>
    ///     The name of the author of this message. May contain a-z, A-Z, 0-9, and underscores, with a maximum length of 64
    ///     characters.
    /// </summary>
    [JsonPropertyName("name")]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public string? Name { get; set; }

    /// <summary>
    ///     The name and arguments of a function that should be called, as generated by the model.
    /// </summary>
    [JsonPropertyName("function_call")]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public FunctionCall? FunctionCall { get; set; }

    public static ChatMessage FromAssistant(
        string content,
        string? name = null,
        FunctionCall? functionCall = null
    )
    {
        return new()
        {
            Role = StaticValues.ChatMessageRoles.Assistant,
            Content = content,
            Name = name,
            FunctionCall = functionCall
        };
    }

    public static ChatMessage FromFunction(string content, string? name = null)
    {
        return new()
        {
            Role = StaticValues.ChatMessageRoles.Function,
            Content = content,
            Name = name,
        };
    }

    public static ChatMessage FromUser(string content, string? name = null)
    {
        return new()
        {
            Role = StaticValues.ChatMessageRoles.User,
            Content = content,
            Name = name,
        };
    }

    public static ChatMessage FromSystem(string content, string? name = null)
    {
        return new()
        {
            Role = StaticValues.ChatMessageRoles.System,
            Content = content,
            Name = name,
        };
    }

    public static ChatMessage FromVisionUser(IList<VisionContent> content)
    {
        return new() { Role = StaticValues.ChatMessageRoles.User, VisionContent = content, };
    }
}
